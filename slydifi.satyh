% vim: foldmethod=marker
@require: gr
@require: color
@require: math
@require: list
@require: annot
@require: footnote-scheme
@import: slydifi-color


type imginfo =
  | JPEG of length * string       % width * filepath
  | PDF of length * string * int  % width * filepath * page-number
  | DummyBox of length * length   % width * height
  | Block of length * block-text
  % | Text of length * inline-text  % width * content: not implemented

let-inline ctx \SLyDiFi =
  let size = get-font-size ctx in
  let f = read-inline ctx in
  let fd = ctx |> set-manual-rising (0pt -' (size *' 0.25)) |> read-inline in
  let fI = ctx |> set-font-size (size *' 0.72)
               |> set-manual-rising (size *' 0.2)
               |> read-inline
  in
  let ib = 
    f {SL} ++ kern(size *' 0.05) ++ fd{Y} ++ kern(size *' 0.03) ++ f{DIF}
      ++ kern(size *' 0.05) ++ fd{I}
  in
  script-guard Latin (no-break ib)

let-rec power-float-int r m =
  match m with
  | 0 -> 1.
  | _ -> (power-float-int r (m - 1)) *. r

let max-float f1 f2 = if (1pt *' f1) >' (1pt *' f2) then f1 else f2

module Slydifi : sig

  % Signature {{{
  val document: 'a -> block-text -> document
    constraint 'a :: (|
      fonts: (|
        frame-title-cjk : string;
        normal-text-cjk : string;
        frame-title-latin : string;
        normal-text-latin : string;
        mono-text-latin : string;
        font-ratio-cjk : float;
      |);
      draft-mode : bool;
    |)

  val paper-width : length
  val paper-height : length

  direct +section : [inline-text list; block-text] block-cmd
  direct +p : [inline-text] block-cmd
  direct +frame : [inline-text; block-text] block-cmd
  direct +frame-nt : [block-text] block-cmd
  direct \emph : [inline-text] inline-cmd
  direct \br : [] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct +listing : [itemize] block-cmd
  direct +listing-abs-pos : [(length * length); length; itemize] block-cmd
  direct +make-title : [block-text] block-cmd
  direct +title-with-en: [inline-text list; inline-text list;] block-cmd
  direct +subtitle: [inline-text list] block-cmd
  direct +author: [inline-text list] block-cmd
  direct +date: [inline-text list] block-cmd
  direct +centered-image : [imginfo] block-cmd
  direct \insert-image : [imginfo] inline-cmd
  direct \fig-abs-pos : [(length * length); imginfo] inline-cmd
  direct +fig-abs-pos : [(length * length); imginfo] block-cmd
  direct \fig-right : [imginfo] inline-cmd
  direct \footnote : [inline-text] inline-cmd
  % }}}

end = struct

  % 文書設定 {{{1
  let font-size-normal  = 20pt
  let font-size-frame-title = 24pt
  let font-size-header-footer = 12pt
  let font-size-title-ja   = 28pt
  let font-size-title-en   = 16pt
  let font-size-author  = 20pt
  let font-size-date  = 12pt
  let font-size-institute  = 16pt
  let font-size-section = 24pt
  let font-size-footnote = 12pt

  % PowerPoint の文書サイズに合わせる
  % let paper-width  = 12.8cm
  % let paper-height = 9.6cm
  let paper-width = 25.4cm
  let paper-height = 14.29cm
    % let header-height = 12pt
  let header-height = 24pt
  let footer-height = 24pt
  let text-horizontal-margin = 30pt
  let text-vertical-margin = font-size-normal *' 1.0
  let text-height = paper-height -' text-vertical-margin *' 2.
  let text-width  = paper-width -' text-horizontal-margin *' 2.
  let text-origin = (text-horizontal-margin, header-height)

  let relwid relx = paper-width *' relx
  let relht rely = paper-height *' rely
  let relpt relx rely = (relwid relx, relht rely)

  let font-ratio-latin = 1.

  let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
  let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
  let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
  let font-latin-mono   = (`lmmono`    , font-ratio-latin, 0.)
  let font-cjk-mincho   = (`ipaexm`    , 1.0  , 0.)
  let font-cjk-gothic   = (`ipaexg`    , 1.0  , 0.)

  let set-cjk-font font ctx =
    ctx |> set-font HanIdeographic font
        |> set-font Kana           font

  % grid
  let main-grid-size = 50pt
  let sub-grid-size = 10pt

  % page
  let-mutable is-first-page <- true

  % colors

  let color-title = SlydifiColor.html-color 0x222222
  let color-bg = SlydifiColor.html-color 0xEEEEEE
  let color-fg = SlydifiColor.html-color 0x282828
  let color-emph = SlydifiColor.html-color 0xCC241D
  let color-link = SlydifiColor.html-color 0x8F3F71
  let color-footer = SlydifiColor.inner-color color-bg color-fg 0.5

  let main-grid-color = SlydifiColor.inner-color color-bg color-fg 0.7
  let sub-grid-color = SlydifiColor.inner-color color-bg color-fg 0.9


  % options {{{
  let-mutable fonts-frame-title-cjk   <- ` `
  let-mutable fonts-frame-title-latin <- ` `
  let-mutable fonts-normal-text-cjk   <- ` `
  let-mutable fonts-normal-text-latin <- ` `
  let-mutable fonts-mono-text-latin   <- ` `
  let-mutable fonts-font-ratio-cjk    <- 1.0
  let-mutable draft-mode              <- false
  % }}}
  % }}}

  % document command {{{

  let clear-page-or-nil is-first-page =
    match !is-first-page with
    | true ->
        let () = is-first-page <- false in
        block-nil
    | false -> clear-page

  let get-standard-context wid =
    get-initial-context wid (command \math)
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-font Kana           font-cjk-mincho
      |> set-font HanIdeographic font-cjk-mincho
      |> set-font Latin          font-latin-roman
      |> set-font-size font-size-normal
      |> set-math-font `lmodern`
      |> set-hyphen-penalty 100
      |> set-leading (font-size-normal *' 1.4)
      |> set-paragraph-margin (font-size-normal *' 0.6) (font-size-normal *' 0.6)
      |> set-text-color color-fg

  let document record inner =

    let page = UserDefinedPaper  (paper-width, paper-height) in

    let () = fonts-frame-title-cjk   <- record#fonts#frame-title-cjk in
    let () = fonts-frame-title-latin <- record#fonts#frame-title-latin in
    let () = fonts-normal-text-cjk   <- record#fonts#normal-text-cjk in
    let () = fonts-normal-text-latin <- record#fonts#normal-text-latin in
    let () = fonts-font-ratio-cjk    <- record#fonts#font-ratio-cjk in
    let () = fonts-mono-text-latin   <- record#fonts#mono-text-latin in
    let () = draft-mode              <- record#draft-mode in

    let ctx-doc = (get-standard-context text-width)
      |> set-font Kana (record#fonts#normal-text-cjk, !fonts-font-ratio-cjk, 0.)
      |> set-font HanIdeographic (record#fonts#normal-text-cjk, !fonts-font-ratio-cjk, 0.)
      |> set-font Latin (record#fonts#normal-text-latin, font-ratio-latin, 0.)
    in

    let bb-main = read-block ctx-doc inner in

    let pagecontf _ =
      let () = FootnoteScheme.start-page () in
      (|
        text-origin = (text-horizontal-margin, text-vertical-margin);
        text-height = text-height;
      |)
    in

    let pagepartsf pbinfo =
      let footer =
        let ctx = get-standard-context paper-width
          |> set-font Latin (record#fonts#normal-text-latin, font-ratio-latin, 0.)
          |> set-font-size font-size-header-footer
          |> set-text-color color-footer
        in
        let it-pageno = embed-string (arabic pbinfo#page-number) in
        let it-count = match get-cross-reference `pagecount` with
          | None -> {??}
          | Some(i) -> embed-string i
        in
        line-break true true ctx (inline-fil ++ (read-inline ctx {#it-pageno;/#it-count;}) ++ inline-skip 20pt)
      in
      (|
      header-origin  = (0pt, 0pt);
      header-content = block-nil;
      footer-origin  = (0pt, paper-height -' footer-height);
      footer-content = footer;
      |)
    in

    let hook = line-break false false (get-standard-context 0pt)
        (hook-page-break (fun pbInfo _ -> (
            let numpages = pbInfo#page-number in
            register-cross-reference `pagecount` (arabic numpages)
        )))
    in

    page-break page pagecontf pagepartsf (bb-main +++ hook)

  % }}}


  % common function in slides {{{
  let-rec range n1 n2 =
    let-rec aux min max =
      if min == max  then [min] else min :: (aux (min + 1) max)
    in
    if n1 < n2 then (aux n1 n2) else (aux n2 n1)

  let ib-bg =
    let rect-bg =
      fill color-bg (Gr.rectangle (0pt, 0pt) (paper-width, paper-height))
    in
    inline-graphics 0pt 0pt 0pt (fun _ -> [rect-bg])

  let bg-grids grid-wid grid-ht grid-color =
    let n-grid-vertical   = round(paper-width  /' grid-wid) in
    let n-grid-horizontal = round(paper-height /' grid-ht)  in
    let vlines =
      List.map (
        fun n -> Gr.line (grid-wid *' float(n), 0pt) (grid-wid *' float(n), paper-height)
      ) (range 1 n-grid-vertical) in
      % [Gr.line (grid-wid, 0pt) (grid-wid, paper-height)] in
    let hlines =
      List.map (
        fun n -> Gr.line (0pt, grid-ht *' float(n)) (paper-width, grid-ht *' float(n))
      ) (range 1 n-grid-horizontal) in
    % let hlines = [Gr.line (0pt, grid-ht) (paper-width, grid-ht)] in
    let lines = List.append vlines hlines in
    let grid = List.map (stroke 1pt grid-color) lines in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> grid) in
    ib

  let make-grids dmode =
    let main-grid = bg-grids main-grid-size main-grid-size main-grid-color in
    let sub-grid = bg-grids sub-grid-size sub-grid-size sub-grid-color in
    if dmode then (sub-grid ++ main-grid) else inline-nil

  let bb-bg ctx dmode =
    let ctx-phantom =
      ctx |> set-font-size 0pt
          |> set-paragraph-margin 0pt 0pt
          |> set-leading 0pt
    in
    (line-break true true ctx-phantom (ib-bg ++ (make-grids dmode) ++ inline-fil))


  % }}}

  % +make-title{} command {{{

  % title config
  let title-xmin = relwid 0.1
  let title-xmax = title-xmin +' 8pt
  let title-ymin = relht 0.35
  let title-ymax = title-ymin +' 8pt
  let title-width = text-width *' 0.8
  let author-width = text-width *' 0.8
  let institute-width = text-width *' 0.8
  let date-ymax = relht 0.9
  let subtitle-xmax = relwid 0.9
  let subtitle-width = text-width *' 0.4
  let subtitle-ymax = relht 0.9
  let institute-ymin = relht 0.30
  let title-mgn = 16pt
  let title-sep = 8pt

  let put-text point align ib =
    let (w, h, d) = get-natural-metrics ib in
    % xalgin: 0. で左揃え，0.5 で中央揃え，1. で右揃え
    % yalgin: 0. で下揃え，0.5 で中央揃え，1. で上揃え
    let (xalign, yalign) = align in
    let (pointx, pointy) = point in
    let xpos = pointx -' w *' xalign in
    let ypos = pointy +' d -' (h +' d) *' yalign in
    draw-text (xpos, ypos) ib  % x, y に関わらず point の絶対座標で決める
  % inline-graphics wid ht 0pt (fn)

  % +make-title の中で使う
  let-block ctx +title-with-en its-title-ja its-title-en =
    let ctx-title-ja = ctx |> set-font-size font-size-title-ja
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let ctx-title-en = ctx |> set-font-size font-size-title-en
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l-ja = get-font-size ctx-title-ja *' 0.25 in
    let l-en = get-font-size ctx-title-en *' 0.25 in
    let bbs-title-ja ctx =
      its-title-ja |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l-ja l-ja)
          (inline-fil ++ read-inline ctx it ++ inline-fil))
    in
    let bbs-title-en ctx =
      its-title-en |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l-en l-en)
          (inline-fil ++ read-inline ctx it ++ inline-fil))
    in
    let ib-title-ja = embed-block-top ctx-title-ja title-width
      (fun ctx -> (bbs-title-ja ctx |> List.fold-left (+++) block-nil))
    in
    let ib-title-en = embed-block-top ctx-title-en title-width
      (fun ctx -> (bbs-title-en ctx |> List.fold-left (+++) block-nil))
    in
    let ib-title-sep = inline-graphics title-width title-sep title-sep
      (fun (dx, dy) -> [stroke 1pt color-title (Gr.line (dx, dy) (dx +' title-width, dy))])
    in
    let ib-title = line-stack-top [ib-title-ja; ib-title-sep; ib-title-en;] in
    let draw-title = [
        (put-text ((paper-width -' title-width) *' 0.5, title-ymax +' title-mgn) (0., 0.) ib-title);
        ]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-title) in
    (line-break true false ctx (ib ++ inline-fil))

  % +make-title の中で使う
  let-block ctx +author its-author =
    let ctx-author = ctx |> set-font-size font-size-author
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-author *' 0.25 in
    let bbs-author ctx =
      its-author |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (inline-fil ++ read-inline ctx it ++ inline-fil))
    in
    let ib-author = embed-block-top ctx-author author-width
      (fun ctx -> (bbs-author ctx |> List.fold-left (+++) block-nil))
    in
    let draw-author =
      [(put-text (title-xmax +' title-mgn, title-ymin -' title-mgn)
        (0., 1.) ib-author);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-author) in
    (line-break true false ctx (ib ++ inline-fil))


  let-block ctx +institute its-institute =
    let ctx-institute = ctx |> set-font-size font-size-institute
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-institute *' 0.25 in
    let bbs-institute ctx =
      its-institute |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (inline-fil ++ read-inline ctx it ++ inline-fil))
    in
    let ib-institute = embed-block-top  ctx-institute institute-width
      (fun ctx -> (bbs-institute ctx |> List.fold-left (+++) block-nil))
    in
    let draw-institute =
      [(put-text (title-xmax +' title-mgn, institute-ymin)
        (0., 1.) ib-institute);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-institute) in
    (line-break true false ctx (ib ++ inline-fil))


  % +make-title の中で使う
  let-block ctx +date its-date =
    let ctx-date = ctx |> set-font-size font-size-date
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-date *' 0.25 in
    let bbs-date ctx =
      its-date |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-date = embed-block-top ctx-date author-width
      (fun ctx -> (bbs-date ctx |> List.fold-left (+++) block-nil))
    in
    let draw-date =
      [(put-text (title-xmax +' title-mgn, date-ymax)
        (0., 0.) ib-date);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-date) in
    (line-break true false ctx (ib ++ inline-fil))

  let-block ctx +subtitle its-subtitle =
    let ctx-subtitle = ctx |> set-font-size font-size-date
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-subtitle *' 0.25 in
    let bbs-date ctx =
      its-subtitle |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (inline-fil ++ read-inline ctx it))
    in
    let ib-date = embed-block-top ctx-subtitle subtitle-width
      (fun ctx -> (bbs-date ctx |> List.fold-left (+++) block-nil))
    in
    let draw-subtitle =
      [(put-text (subtitle-xmax -' subtitle-width, subtitle-ymax)
        (0., 0.) ib-date);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-subtitle) in
    (line-break true false ctx (ib ++ inline-fil))

  let-block ctx +make-title bt-inner =
    let north-rect = Gr.rectangle (title-xmin, title-ymax) (title-xmax, relht 1.00) in
    let south-rect = Gr.rectangle (title-xmin, title-ymin) (title-xmax, relht 0.00) in
    let east-rect  = Gr.rectangle (title-xmax, title-ymin) (relwid 1.00, title-ymax) in
    let west-rect  = Gr.rectangle (title-xmin, title-ymin) (relwid 0.00, title-ymax) in

    let draw-titleframe =
      [
        %(fill color-title north-rect);
        %(fill color-title south-rect);
        %(fill color-title east-rect);
        %(fill color-title west-rect);
      ]
    in
    let ib =
      inline-graphics 0pt 0pt 0pt (fun _ -> draw-titleframe)
    in
    (clear-page-or-nil is-first-page) +++
    (bb-bg ctx !draft-mode) +++ (line-break true false ctx (ib ++ inline-fil))
      +++ (read-block ctx bt-inner)

  % }}}

  % +frame{}<> command {{{

  let placeholder height (origX, origY) =
    [fill Color.white (Gr.rectangle (origX, origY) (origX, origY +' height))]

  let make-frame-title ctx =

    ctx |> set-font-size font-size-frame-title
        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
        |> set-text-color color-title

  let make-placeholder ctx glue-height =
    let ht = length-max 0pt glue-height in
    let ctx2 = ctx |> set-paragraph-margin 0pt 0pt in
    line-break true false ctx2 (inline-graphics 0pt ht 0pt (placeholder ht) ++ inline-fil)

  let-block ctx +frame title inner =
    let ctx-title = make-frame-title ctx in
    let title-padding = 12pt in
    let deco (x, y) wid hgt dpt =
      let path1 =
        let xL = x -' text-horizontal-margin +' title-padding in
        let yT = y +' text-vertical-margin in
        let xR = xL +' paper-width -' title-padding *' 2.0 in
        let yB = yT -' 3pt in
        Gr.rectangle (xL, yT) (xR, yB)
      in
      [
        (fill color-title path1);
      ]
    in
    let bb-title =
      let ib-title = read-inline ctx-title title in
      block-frame-breakable
        (ctx |> set-paragraph-margin 0pt 0pt)
          (title-padding -' text-horizontal-margin, title-padding,
          title-padding -' text-vertical-margin, title-padding +' text-vertical-margin)
            (deco, deco, deco, deco)
              (fun ctx ->
                form-paragraph (make-frame-title ctx) (ib-title ++ inline-fil)
              )
    in
    let ib-inner = embed-block-top ctx text-width (fun ctx -> read-block ctx inner) in
    let bb-inner = line-break false false ctx ib-inner in
    let glue-height = (text-height -' footer-height -' header-height -' get-natural-length bb-inner -' get-natural-length bb-title) *' .5 in
    let bb-glue = make-placeholder ctx glue-height in
    (clear-page-or-nil is-first-page) +++
    (bb-bg ctx !draft-mode) +++
      bb-title % +++ bb-glue
        +++ bb-inner
          % bb-title +++ bb-inner +++ clear-page

  let-block ctx +frame-nt inner =
    let ib-inner = embed-block-top ctx text-width (fun ctx -> read-block ctx inner) in
    let bb-inner = line-break false false ctx ib-inner in
    let glue-height = (text-height -' footer-height -' header-height -' get-natural-length bb-inner) *' .5 in
    let bb-glue = make-placeholder ctx glue-height in
    % bb-glue +++ bb-inner +++ clear-page
    (clear-page-or-nil is-first-page) +++
    (bb-bg ctx !draft-mode) +++ bb-inner

      % }}}

  % 文書構造 {{{

  let section-title ctx its-title =
    let ctx-title = ctx |> set-font-size font-size-title-ja
                        |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                        |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
                        |> set-text-color color-title
    in
    let l = get-font-size ctx-title *' 0.25 in
    let bbs-title ctx =
      its-title |> List.map (fun it ->
        line-break true true (ctx |> set-paragraph-margin l l)
          (read-inline ctx it ++ inline-fil))
    in
    let ib-title = embed-block-top ctx-title title-width
      (fun ctx -> (bbs-title ctx |> List.fold-left (+++) block-nil))
    in
    let draw-title =
      [(put-text (title-xmax +' title-mgn, title-ymax +' title-mgn)
        (0., 0.) ib-title);]
    in
    let ib = inline-graphics 0pt 0pt 0pt (fun _ -> draw-title) in
    (line-break true false ctx (ib ++ inline-fil))

  let-block ctx +section its bt =
    let sec-title-xmin = title-xmin in
    let sec-title-ymin = title-ymin in
    let sec-title-xmax = title-xmin +' 5pt in
    let sec-title-ymax = title-ymin +' 5pt in
    let north-rect = Gr.rectangle (sec-title-xmin, sec-title-ymax) (sec-title-xmax, relht 1.00) in
    let south-rect = Gr.rectangle (sec-title-xmin, sec-title-ymin) (sec-title-xmax, relht 0.00) in
    let east-rect  = Gr.rectangle (sec-title-xmax, sec-title-ymin) (relwid 1.00, sec-title-ymax) in
    let west-rect  = Gr.rectangle (sec-title-xmin, sec-title-ymin) (relwid 0.00, sec-title-ymax) in
    let cent-rect  = Gr.rectangle (sec-title-xmin, sec-title-ymin) (sec-title-xmax, sec-title-ymax) in
    let rect-color = SlydifiColor.inner-color color-title color-bg 0.4 in
    let draw-titleframe =
      [
        (fill rect-color north-rect);
        (fill rect-color south-rect);
        (fill rect-color east-rect);
        (fill rect-color west-rect);
        (fill color-title cent-rect);
      ]
    in
    let ib =
      inline-graphics 0pt 0pt 0pt (fun _ -> draw-titleframe)
    in
    (clear-page-or-nil is-first-page) +++
    (bb-bg ctx !draft-mode) +++ (line-break true false ctx (ib ++ inline-fil))
      +++ (section-title ctx its) +++ (read-block ctx bt)



  let-block ctx +p it =
    line-break true true ctx
      (read-inline ctx it ++ inline-fil)

  % }}}

  % インラインテキスト装飾 {{{

  let-inline ctx \emph it =
    let ctx2 = ctx |> set-text-color color-emph
                   |> set-font Latin (!fonts-frame-title-latin, 1.0, 0.)
                   |> set-cjk-font (!fonts-frame-title-cjk, !fonts-font-ratio-cjk, 0.)
    in
    (read-inline ctx2 it)

  let-inline ctx \link ?:it url =
    let ctx2 = ctx |> set-text-color color-link in
    let ctx-link = match it with
      | None    -> ctx2 |> set-font Latin (!fonts-mono-text-latin, 1.0, 0.)
      | Some(v) -> ctx2
    in
    let text = match it with
      | None    -> (embed-string url)
      | Some(v) -> v
    in
    read-inline ctx-link {\href(url){#text;}}

  let-inline ctx \br
    = discretionary (- 1000) inline-nil inline-fil inline-nil

  % }}}

    % 画像追加 {{{

  let draw-dummy-box wid ht (x, y) =
    let rect-path = Gr.rectangle (x, y) (x +' wid, y +' ht) in
    [(stroke 1pt color-fg rect-path)]

  let-block ctx +centered-image img-info =
    match img-info with
    | JPEG(wid, srcpath) ->
        let img = load-image srcpath in
        line-break true true ctx (inline-fil ++ use-image-by-width img wid ++ inline-fil)
    | PDF(wid, srcpath, num) ->
        let img = load-pdf-image srcpath num in
        line-break true true ctx (inline-fil ++ use-image-by-width img wid ++ inline-fil)
    | Block(wid, bt) ->
        let ib = embed-block-top ctx wid (fun ctx -> read-block ctx bt) in
        line-break true true ctx (inline-fil ++ ib ++ inline-fil)
    | DummyBox(wid, ht) ->
        line-break true true ctx (inline-fil ++ (inline-graphics wid ht 0pt (draw-dummy-box wid ht)) ++ inline-fil)

  let-inline ctx \insert-image img-info =
    match img-info with
    | JPEG(wid, srcpath) ->
        let img = load-image srcpath in use-image-by-width img wid
    | PDF(wid, srcpath, num) ->
        let img = load-pdf-image srcpath num in use-image-by-width img wid
    | Block(wid, bt) ->
        let ib = embed-block-top ctx wid (fun ctx -> read-block ctx bt) in ib
    | DummyBox(wid, ht) ->
        inline-graphics wid ht 0pt (draw-dummy-box wid ht)


  let fig-abs-pos ctx pt img-info =
    match img-info with
      | JPEG(wid, srcpath) ->
          let img = load-image srcpath in
          let ib = use-image-by-width img wid in
          inline-graphics 0pt 0pt 0pt (fun _ -> [draw-text pt ib])
      | PDF(wid, srcpath, num) ->
          let img = load-pdf-image srcpath num in
          let ib = use-image-by-width img wid in
          inline-graphics 0pt 0pt 0pt (fun _ -> [draw-text pt ib])
      | Block(wid, bt) ->
          let ib = embed-block-top ctx wid (fun ctx -> read-block ctx bt) in
          inline-graphics 0pt 0pt 0pt (fun _ -> [draw-text pt ib])
      | DummyBox(wid, ht) ->
          inline-graphics 0pt 0pt 0pt (fun _ -> draw-dummy-box wid ht pt)


  let-inline ctx \fig-abs-pos pt img-info =
    fig-abs-pos ctx pt img-info

  let-block ctx +fig-abs-pos pt img-info =
    let it-gr = fig-abs-pos ctx pt img-info in
    line-break true true ctx (it-gr ++ inline-fil)

  let-inline ctx \fig-right img-info =
    match img-info with
    | JPEG(wid, srcpath) ->
        let img = load-image srcpath in
        let ib = use-image-by-width img wid in
        let (ib-w, ib-h, ib-d) = get-natural-metrics ib in
        inline-graphics 0pt 0pt 0pt (fun (x, y) ->
          [
            draw-text
              (paper-width -' text-horizontal-margin -' ib-w,
              y +' (ctx |> get-font-size) -' ib-h) ib
          ])
    | PDF(wid, srcpath, num) ->
        let img = load-pdf-image srcpath num in
        let ib = use-image-by-width img wid in
        let (ib-w, ib-h, ib-d) = get-natural-metrics ib in
        inline-graphics 0pt 0pt 0pt (fun (x, y) ->
          [
            draw-text
              (paper-width -' text-horizontal-margin -' ib-w,
              y +' (ctx |> get-font-size) -' ib-h) ib
          ])
    | Block(wid, bt) ->
        let ib = embed-block-top ctx wid (fun ctx -> read-block ctx bt) in
        let (ib-w, ib-h, ib-d) = get-natural-metrics ib in
        inline-graphics 0pt 0pt 0pt (fun (x, y) ->
          [
            draw-text
              (paper-width -' text-horizontal-margin -' ib-w,
              y +' (ctx |> get-font-size) -' ib-h) ib
          ])
    | DummyBox(wid, ht) ->
        let pt y =
          (paper-width -' text-horizontal-margin -' wid,
          y +' (ctx |> get-font-size) -' ht) in
          inline-graphics 0pt 0pt 0pt (fun (x, y) -> draw-dummy-box wid ht (pt y))

    % }}}

    % +listing{} command {{{
  let (+++>) = List.fold-left (+++)

  let item-indent = 20pt

  let bullet depth color (x, y) =
    let yc = y +' font-size-normal *' 0.3 in
    let xl = x in
    let xr = x +' font-size-normal *' 0.4 in
    let yu = yc +' font-size-normal *' 0.2 in
    let yd = yc -' font-size-normal *' 0.2 in
    let tria = start-path (xl, yu)
      |> line-to (xr, yc)
      |> line-to (xl, yd)
      |> close-with-line in
  let north = yc +' font-size-normal *' 0.25 in
  let east  = x  +' font-size-normal *' 0.25 in
  let south = yc -' font-size-normal *' 0.25 in
  let west  = x  -' font-size-normal *' 0.25 in
  let dia = start-path (x, north)
    |> line-to (east, yc)
    |> line-to (x, south)
    |> line-to (west, yc)
    |> close-with-line in
  let circ =
    let cx = x +' font-size-normal *' 0.3 in
    let cy = y +' font-size-normal *' 0.3 in
    let r = font-size-normal *' 0.15 in
    Gr.circle (cx, cy) r in
    let path =
      match depth with
      | 0 -> dia
      | 1 -> tria
      | _ -> circ
    in [ fill color path; ]

  let-rec item : context -> int -> itemize -> block-boxes
    | ctx depth (Item(parent, children)) =
        let font-size-tmp = font-size-normal *' (max-float (power-float-int 0.9 depth) 0.75) in
        let color = color-title in
        let br-bullet = (inline-graphics (font-size-normal *' 0.8) font-size-normal 0pt (bullet depth color)) in
        let bullet-width = get-natural-width br-bullet in
        let parent-indent = item-indent *' (float depth) in
        let ctx2 = ctx
          |> set-font-size font-size-tmp
          |> set-paragraph-margin (font-size-tmp *' 0.6) (font-size-tmp *' 0.6)
        in
        let br-parent =
          embed-block-top ctx2 ((get-text-width ctx2) -' parent-indent -' bullet-width) (fun ctx2 ->
            form-paragraph ctx2 ((read-inline ctx2 parent) ++ inline-fil)
          ) 
        in
        let bc-parent =
          form-paragraph ctx2
            ((inline-skip parent-indent) ++ br-bullet ++ br-parent)
        in
        let bclst-children = List.map (item ctx2 (depth + 1)) children in
        bc-parent +++> bclst-children

  let-block ctx +listing (Item(_, itmzlst)) =
    let bclst = List.map (item ctx 0) itmzlst in
    block-nil +++> bclst

  let-rec item-abs : context -> length -> int -> itemize -> inline-boxes
    | ctx width depth (Item(parent, children)) =
      let font-size-tmp = font-size-normal *' (max-float (power-float-int 0.9 depth) 0.75) in
      let color = color-title in
      let br-bullet = (inline-graphics (font-size-normal *' 0.8) font-size-normal 0pt (bullet depth color)) in
      let bullet-width = get-natural-width br-bullet in
      let parent-indent = item-indent *' (float depth) in
      let ctx2 = ctx
        |> set-font-size font-size-tmp
        |> set-paragraph-margin (font-size-tmp *' 0.6) (font-size-tmp *' 0.6)
      in
      let dummy-deco _ _ _ _ = [] in
      let br-parent =
          embed-block-top ctx2 (width -' parent-indent -' bullet-width) (fun ctx2 ->
            form-paragraph ctx2 ((read-inline ctx2 parent) ++ inline-fil)
          )
          |> inline-frame-breakable (0pt, 0pt, 0pt, font-size-tmp *' 0.6) (dummy-deco, dummy-deco, dummy-deco, dummy-deco)
      in
      let ib-parent =
          ((inline-skip parent-indent) ++ br-bullet ++ br-parent)
      in
      let iblst-children = List.map (item-abs ctx2 width (depth + 1)) children in
      line-stack-top (ib-parent :: iblst-children)

  let-block ctx +listing-abs-pos pt width (Item(_, itmzlst)) =
    let iblst = List.map (item-abs ctx width 0) itmzlst in
    let ib = line-stack-top iblst in
    let it-gr = inline-graphics 0pt 0pt 0pt (fun _ -> [draw-text pt ib]) in
    line-break true true ctx (it-gr ++ inline-fil)

      % }}}

    % \footnote{} command {{{
  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (font-size-footnote *' 0.9)
            |> set-leading (font-size-footnote *' 1.2)
            |> set-paragraph-margin (font-size-footnote *' 0.5) (font-size-footnote *' 0.5)
          %temporary
      in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx ibf bbf


    %}}}
    
end



